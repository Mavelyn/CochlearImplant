clear
close all

filepath = 'C:\Users\mavel\Documents\BME 252\CI Project\.wav Files\';
%soundFiles = {dir(filepath).name};
%soundFiles = soundFiles(3:end);

soundFile = 'test.wav';
newSoundFile = 'Test1.wav';

% Read sound file and find sampling rate
filename = append(filepath, soundFile);
processSound(filename);

%% Processes sound file and plots waveform
function processSound(filename)

% Read sound file
[oldAudioData,sampleRate] = audioread(filename);

% Check whether input sound is stereo or mono
% Can also use audioinfo instead
[m, n] = size(oldAudioData);

% If stereo, add 2 columns to make 1 column
if n == 2
    audioData = sum(oldAudioData,2);
else
    audioData = oldAudioData;
end

% Update size
clear m n;
[m, n] = size(audioData);

% Play sound (updated)
sound(audioData,sampleRate);

% Create a new .wav file using y (audio data) and Fs (sample rate, Hz)
name = split(filename, '.');
name = name(1,1);new_name = strcat(name,'-out','.wav');
new_name_char = char(new_name);
audiowrite(new_name_char, audioData, sampleRate);

% Plot sound waveform as a function of sample number
figure()
soundWaveform = plot(audioData);
xlabel('Sample Number');
ylabel('Audio Signal');

% If sampling rate is not 16 kHz, downsample to 16 kHz
if sampleRate > 16000
    audioData = resample(audioData, 16000, sampleRate);
elseif sampleRate < 16000
    disp('Find new sound file with larger sample rate');
    return;
end

% Generate a signal using cosine function that oscillates at 1 kHz
timeDuration = m/sampleRate;
period = @(f) 1/f; % period function
time = 0:period(sampleRate):timeDuration;
freq = 1000; % Hz
signal = @(t) cos(2*pi*freq*t);

% Play sound generated by signal
sound(signal(time),sampleRate);

% Plot two cycles of its waveform as a function of time
figure()
time2 = 0:0.0000001:2*period(freq);
plot(signal(time2));
xlabel('Time');

end



