clear
close all

filepath = 'C:\Users\mavel\Documents\BME 252\CI Project\.wav Files\';
%soundFiles = {dir(filepath).name};
%soundFiles = soundFiles(3:end);

soundFile = 'MaleClear.wav';
%newSoundFile = 'Test1.wav';

% Read sound file and find sampling rate
%filename = append(filepath, soundFile);
processSound(filepath, soundFile);

%% Processes sound file and plots waveform
function processSound(filepath, soundFile)

filename = append(filepath, soundFile);

% Read sound file
[oldAudioData,sampleRate] = audioread(filename);

% Check whether input sound is stereo or mono
% Can also use audioinfo instead
[~, n] = size(oldAudioData);

% If stereo, add 2 columns to make 1 column
if n == 2
    audioData = sum(oldAudioData,2);
else
    audioData = oldAudioData;
end

% Update size
clear n;
[m, n] = size(audioData);

% Play sound (updated)
sound(audioData,sampleRate);

% Create a new .wav file using y (audio data) and Fs (sample rate, Hz)
name = strsplit(soundFile, '.');
name = string(name(1));
newFilename = append(name,'-out','.wav');
audiowrite(newFilename, audioData, sampleRate);

% Plot sound waveform as a function of sample number
figure()
soundWaveform = plot(audioData);
title();
xlabel('Sample Number');
ylabel('Amplitude');

% If sampling rate is not 16 kHz, downsample to 16 kHz
if sampleRate > 16000
    audioData = resample(audioData, 16000, sampleRate);
    sampleRate = 16000;
elseif sampleRate < 16000
    disp('Find new sound file with larger sample rate');
    return;
end

% Generate a signal using cosine function that oscillates at 1 kHz
% timeDuration = m/sampleRate;
% period = @(f) 1/f; % period function
% time = 0:period(sampleRate):timeDuration;
% freq = 1000; % Hz
% signal = @(t) cos(2*pi*freq*t);

% Play sound generated by signal
% pause(timeDuration);
% sound(signal(time),sampleRate);

% Plot two cycles of its waveform as a function of time
%figure()
%time2 = 0:period(sampleRate):2*period(freq);
%plot(time2, signal(time2));
%ylabel('Amplitude');
%xlabel('Time (s)');

% N is the number of channels
N = 79;

% Create a cell array to store the output signals of each channel
filteredSignal = cell(N,1);

% Initialize cutoff frequencies for bandpass filter
low = 100;
high = 200;

% Bandpass Filter Bank
for i = 1:N
    filteredSignal{i} = butterBandpassFilter(audioData, low, high, sampleRate, 5);
    low = low + 100;
    high = high + 100;
end

% Plot the output signal of the lowest frequency channel
figure()
plot(filteredSignal{1});
title('Output signal of Lowest Frequency Channel');
xlabel('Sample Number');
ylabel('Amplitude');

% Plot the output signal of the highest frequency channel
figure()
plot(filteredSignal{16});
title('Output signal of Highest Frequency Channel');
xlabel('Sample Number');
ylabel('Amplitude');

% Create cell array for envelopes of each channel
envelope = cell(N,1);

% Envelope extraction
for i = 1:N
    % Rectify output signals of all bandpass filters
    filteredSignal{i} = abs(filteredSignal{1});
    
    % Detect envelopes using lowpass filter with 400 Hz cutoff
    envelope{i} = butterLowpassFilter(filteredSignal{1}, 400, sampleRate, 5);
end

% Plot envelope of lowest frequency channel
figure()
plot(envelope{1});
title('Envelope of Lowest Frequency Channel');

% Plot envelope of highest frequency channel
figure()
plot(envelope{16});
title('Envelope of Highest Frequency Channel');

end

function[y] = butterBandpassFilter(data, lowcut, highcut, fs, order)
    % Nyquist frequency
    nyq = 0.5*fs;

    % Since the cutoff frequency cannot be equal to 1 and nyq = 8000,
    % the upper cutoff frequency must be less than 8000
    if highcut == 8000
        highcut = 7999.999999999;
    end
    
    % Normalize the frequencies by dividing by the Nyquist frequency
    low = lowcut / nyq;
    high = highcut / nyq;
    
    % butter() returns b,a which are transfer function coefficients
    [b, a] = butter(order, [low, high], 'bandpass');
    y = filter(b, a, data);
end

function[y] = butterLowpassFilter(data, cutoff, fs, order)
    % Nyquist frequency 
    nyq = 0.5*fs;
    
    % Normalize the cutoff frequency
    cutoffFreq = cutoff / nyq;
    
    [b, a] = butter(order, cutoffFreq, 'low');    
    y = filter(b, a, data);
end
